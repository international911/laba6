CREATE TABLE shop (
id INTEGER PRIMARY KEY,
name VARCHAR(255) UNIQUE,
balance FLOAT NOT NULL
);

CREATE TABLE product (
id INTEGER PRIMARY KEY,
name VARCHAR(255) UNIQUE,
price FLOAT NOT NULL
);

CREATE TABLE warehouse (
shop_id INTEGER REFERENCES shop (id),
product_id INTEGER REFERENCES product (id),
quantity INTEGER NOT NULL,
PRIMARY KEY (shop_id, product_id)
);

INSERT INTO shop (id, name, balance) VALUES 
(1, 'пятерочка',31),
(2, 'перекресток',133);

INSERT INTO product (id, name, price) VALUES
(1, 'яйца', 160),
(2, 'хлеб', 30),
(3, 'молоко', 65);

INSERT INTO warehouse (shop_id, product_id, quantity) VALUES
(1, 1, 30),
(2, 2, 20),
(1, 3, 40);


CREATE TABLE worker (
    worker_id INTEGER PRIMARY KEY,
    shop_id INTEGER REFERENCES product (id),
    name VARCHAR(255),
    salary INTEGER NOT NULL,
    position VARCHAR(255)
);

INSERT INTO worker (worker_id, shop_id, name, salary, position) VALUES    
(1, 1, 'Иван', 50000, 'Менеджер'),    
(2, 1, 'Екатерина', 60000, 'Продавец'),    
(3, 2, 'Аллександр', 55000, 'Кассир'),    
(4, 2, 'Андрей', 48000, 'Продавец');

примеры запросов с операциями группировки и сортировки для таблицы "worker":

1. Запрос на получение средней зарплаты по должностям:

SELECT position, AVG(salary) AS avg_salary
FROM worker
GROUP BY position;

2. Запрос на получение количества сотрудников в каждом магазине:

SELECT shop_id, COUNT(*) AS num_workers
FROM worker
GROUP BY shop_id;

3. Запрос на получение списка сотрудников, отсортированных по убыванию зарплаты:

SELECT * FROM worker
ORDER BY salary DESC;

примеры запросов с использованием агрегатных функций для таблицы "worker":

1. Запрос на вычисление общей суммы зарплаты всех сотрудников:

SELECT SUM(salary) AS total_salary
FROM worker;

2. Запрос на вычисление максимальной зарплаты среди сотрудников:

SELECT MAX(salary) AS max_salary
FROM worker;
